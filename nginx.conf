user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    sendfile on;
    keepalive_timeout 65;
    gzip on;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name localhost;

        location / {
            # Unauthenticated users are redirected to login page
            # auth_request /api/authenticate;
            # error_page 401 = @loginRedirect;

        # Set the root directory
        root /usr/share/nginx/html;

        # Set the index page
        index login.html;

                    # Tries to serve file.html if file is requested
        rewrite ^(/.*)\.html$ $1 last;
        rewrite ^(/.*)/$ $1 last;
        try_files $uri.html $uri/ $uri =404;
        }

        location /api/ {
            # Enable CORS
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST';

            # configure proxy to pass requests to Node.js
            proxy_pass http://nodejs:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location @loginRedirect {
            return 302 /login.html;
        }

        location @mainRedirect {
            return 302 /main.html;
        }

        location @dashboardRedirect {
            return 302 /dashboard.html;
        }

        # Custom error pages
        error_page 404 /error-page.html;
        error_page 500 502 503 504 /error-page.html;
    }
}
